int a;
int b;
int c;

bool x;
bool y;
bool z;

struct O {
  int i;
};

struct P {
  struct O o;
};

struct Q {
  struct P p;
};

void foo() {
}

int bar(int x) {
}

int main() {
  int a_l;
  bool x_l;
  struct O o;
  struct P p;
  struct Q q;

  o.i = 5;
  p.o.i = 5;
  q.p.o.i = 5;

  
// stmt            ::= assignExp SEMICOLON
//                 | loc PLUSPLUS SEMICOLON
//                 | loc MINUSMINUS SEMICOLON
//                 | CIN READ loc SEMICOLON
//                 | COUT WRITE exp SEMICOLON
//                 | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
//                 | IF LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY ELSE LCURLY varDeclList stmtList RCURLY
//                 | WHILE LPAREN exp RPAREN LCURLY varDeclList stmtList RCURLY
//                 | RETURN exp SEMICOLON
//                 | RETURN SEMICOLON
//                 | fncall SEMICOLON
//                 ;
// 
// assignExp       ::= loc ASSIGN exp
//                 ;
//                 
// exp             ::= assignExp
//                 | exp PLUS exp
//                 | exp MINUS exp
//                 | exp TIMES exp
//                 | exp DIVIDE exp
//                 | NOT exp
//                 | exp AND exp
//                 | exp OR exp
//                 | exp EQUALS exp
//                 | exp NOTEQUALS exp
//                 | exp LESS exp
//                 | exp GREATER exp
//                 | exp LESSEQ exp
//                 | exp GREATEREQ exp
//                 | MINUS term
//                 | term
//                 ;
// 
// term            ::= loc
//                 | INTLITERAL
//                 | STRINGLITERAL
//                 | TRUE
//                 | FALSE
//                 | LPAREN exp RPAREN
//                 | fncall
//                 ;
// 
// fncall          ::=  id LPAREN RPAREN   // fn call with no args
//                 | id LPAREN actualList RPAREN  // with args
//                 ;
// 
// actualList      ::= exp
//                 | actualList COMMA exp
//                 ;
// 
// type            ::= INT
//                 | BOOL
//                 | VOID
//                 ;
// 
// loc             ::= id
//                 | loc DOT id
// 
// id              ::= ID
//                 ;


  return 0;
}


