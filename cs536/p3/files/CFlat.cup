/**********************************************************************
 Java CUP specification for a parser for C Flat programs
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/* The code below redefines method syntax_error to give better error messages
 * than just "Syntax error"
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner) */
terminal                INT;
terminal                BOOL;
terminal                VOID;
//https://piazza.com/class/id543c6knik6h7?cid=95
terminal TokenVal       TRUE;
terminal TokenVal       FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Nonterminals
 *
 * NOTE: You will need to add more nonterminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList;
non terminal DeclNode         decl;
non terminal VarDeclNode      varDecl;
non terminal TypeNode         type;
non terminal IdNode           id;
non terminal StructDeclNode   structDecl;
non terminal FnDeclNode       fnDecl;
non terminal LinkedList       formals;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList;
non terminal LinkedList       formalsList;
non terminal FormalDeclNode   formalDecl;
non terminal StmtNode         stmt;
non terminal AssignStmtNode   assignExp;
non terminal ExpNode          loc;
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList;
non terminal ExpNode          exp;
non terminal ExpNode          term;


 
 
/* NOTE: Add precedence and associativity declarations here */


start with program;


/* Grammar with actions
 *
 * NOTE: add more grammar rules below
 */
program         ::= declList: d
                {: RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {: dl.addLast(d);
                   RESULT = dl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {: RESULT = v;
                :}
                | structDecl:s
                {: RESULT = s;
                :}
                | fnDecl:f
                {: RESULT = f;
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {: RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY declList:d RCURLY SEMICOLON
                {: RESULT = new StructDeclNode(i, new DeclListNode(d));
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:fb
                {: RESULT = new FnDeclNode(t, i, new FormalsListNode(f), fb);
                :}
                ;

formals         ::= LPAREN RPAREN
                {: RESULT = new LinkedList<FormalDeclNode>();
                :}
                | LPAREN formalsList:f RPAREN
                {: RESULT = f;
                :}
                ;

formalsList     ::= formalDecl:f
                {: RESULT = new LinkedList<FormalDeclNode>();
                   RESULT.addLast(f);
                :}
                | formalDecl:f COMMA formalsList:fl
                {: fl.addLast(f);
                   RESULT = fl;
                :}
                ;

formalDecl      ::= type:t id:i
                {: RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnBody          ::= LCURLY declList:d stmtList:s RCURLY
                {: RESULT = new FnBodyNode(new DeclListNode(d), new StmtListNode(s));
                :}
                ;

stmtList        ::= stmtList:sl stmt:s
                {: sl.addLast(s);
                   RESULT = sl;
                :}
                | /* epsilon */
                {: RESULT = new LinkedList<StmtNode>();
                :}

                ;

stmt            ::= RETURN SEMICOLON
                {: RESULT = new ReturnStmtNode(null);
                :}
                | fncall:f SEMICOLON
                {: RESULT = new CallStmtNode(f);
                :}
                ;

actualList      ::= exp:e
                {: RESULT = new LinkedList<ExpNode>();
                   RESULT.add(e);
                :}
                | actualList:l COMMA exp:e
                {:
                   l.addLast(e);
                   RESULT = l;
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {: RESULT = new CallExpNode(i, null);
                :}
                | id:i LPAREN actualList:l RPAREN
                {: RESULT = new CallExpNode(i, new ExpListNode(l));
                :}
                ;

exp             ::= term:t
                {: RESULT = t; 
                :}
                ;

term            ::= loc:l
                {: RESULT = l;
                :}
                | INTLITERAL:i
                {: RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {: RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {: RESULT = new TrueNode(t.linenum, t.charnum);
                :}
                | FALSE: f
                {: RESULT = new FalseNode(f.linenum, f.charnum);
                :}
                | LPAREN exp:e RPAREN
                {: RESULT = e;
                :}
                | fncall:f
                {: RESULT = f;
                :}
                ;

type            ::= VOID
                {: RESULT = new VoidNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | INT
                {: RESULT = new IntNode();
                :}
                ;

loc             ::= id:i
                {: RESULT = new DotAccessExpNode(null, i);
                :}
                | loc:l DOT id:i
                {: RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;

