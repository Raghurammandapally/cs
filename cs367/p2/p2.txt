The goals of this assignment are to:
  Understand and implement a doubly-linked chain of nodes.
  Gain experience writing classes that implement Java interfaces.
  Gain experience working with Java references.
  Implement exceptions.
  Develop an application that processes input commands as words.
  Get more practice with console and file I/O.

Google's lead Gmail developer is stepping down, and they need YOU to put the finishing touches on a project code-named "UWmail". UWmail is a Java-based command-line interface that mirrors the basic capabilities of their popular email client. After all, who needs responsive web design when you can have the dim glow of a terminal and a blinky cursor? 

Specifically, your UWmail application should provide these capabilities:
- Loads in text files which contain structured email data
- User can browse through emails in the inbox, which appear as "conversation" threads, in sorted order from most recent to oldest
- User can "respond" to emails, which appends a new email to the end of the conversation

For this programming assignment you will be implementing a doubly-linked list to represent the UWmail inbox. The main class you'll write will be the application, as was done in Program 1, that loads data from text files and prompts the user to choose operations for navigating the inbox and responding to emails

Specifications:

  DoublyLinkedList<E> Class implements ListADT<E> Interface 
    void add(E item)  
    void add(int pos,E item)  
    boolean contains(E item)  
    E get(int pos)  
    boolean isEmpty() 
    E remove(int pos) 
    int size()  

  ListNode:
    ListNode<E>(E data)
    ListNode<E>(E data, ListNode<E> next, ListNode<E> prev)
    E getData()
    ListNode<E> getNext()
    ListNode<E> getPrev()
    void setData(E data)
    void setNext(ListNode<E> next)
    void setPrev(ListNode<E> prev)

  Custom class(es):
    Email
      (OPTIONAL) String in-reply-to
      (OPTIONAL) ListADT<String> references
      Instant date
      String delivered-to
      String message-id
      String subject
      String from
      String to
      String body
    
    Conversation
      DoublyLinkedList<Email>
      
  Custom exception(s):
    NullMessageID
    
  Main class:
    Process input:
      d   delete (email from conversation or conversation from inbox)
      r   reply (adds email to end of converation with current time, to/from reversed, new message-id)
      q   quit
      (n) open conversation #n
      j   next email in conversation
      k   previous email in conversation


 TODO
 ---------
[x] mention behavior of doing next at last convo, and doing prev at first
[ ] conversation class, storing pointer to previously looked at email
[ ] when opening a conversation for the first time, display all emails
[ ] when n/p pushed, display the first email and store the pointer
[ ] add doublylinkedlist
[ ] add "implementation" after classes that they need to code?
[ ] add quit option to trash
[ ] example input/output files
[ ] change foreach loop in ZipExapmleFile to while(hasNext)
[ ] add comment to ZipExample file saying "follow this approach" for <? extends ..>
[ ] 
[ ] email jim by weds evening
[ ]   add reminder about being out oct week
[ ] TA's should look at Thursday morning
[ ] change p2 links to p231
[ ] 
[ ] find TA coverage for lab hours
[ ] add date format string for emails
